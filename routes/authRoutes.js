const express = require("express");
const router = express.Router();
const pool = require("../config/database");
const bcrypt = require("bcryptjs");

// 游댳 Exibir p치gina de login
router.get("/login", (req, res) => {
    res.render("login");
});

// 游댳 Autenticar usu치rio (Login)
router.post("/login", async (req, res) => {
    const { email, senha } = req.body;

    try {
        const [usuarios] = await pool.query("SELECT * FROM usuarios WHERE email = ?", [email]);

        if (usuarios.length === 0) {
            return res.status(401).send("Usu치rio n칚o encontrado.");
        }

        const usuario = usuarios[0];

        // Verifica a senha com bcrypt
        const senhaValida = await bcrypt.compare(senha, usuario.senha);
        if (!senhaValida) {
            return res.status(401).send("Senha incorreta.");
        }

        // Salva os dados do usu치rio na sess칚o
        req.session.usuario = { id: usuario.id, nome: usuario.nome, email: usuario.email };

        // Redireciona para a p치gina de cartas
        res.redirect("/cartas");
    } catch (error) {
        console.error("Erro no login:", error);
        res.status(500).send("Erro ao processar login.");
    }
});

// 游댳 Exibir p치gina de cadastro
router.get("/register", (req, res) => {
    res.render("register");
});

// 游댳 Rota para cadastrar usu치rio
router.post("/register", async (req, res) => {
    const { nome, email, senha } = req.body;

    try {
        if (!nome || !email || !senha) {
            return res.status(400).send("Todos os campos s칚o obrigat칩rios.");
        }

        const [usuarios] = await pool.query("SELECT * FROM usuarios WHERE email = ?", [email]);

        if (usuarios.length > 0) {
            return res.status(400).send("E-mail j치 cadastrado.");
        }

        const senhaCriptografada = await bcrypt.hash(senha, 10);

        await pool.query("INSERT INTO usuarios (nome, email, senha) VALUES (?, ?, ?)", 
            [nome, email, senhaCriptografada]);

        res.redirect("/login");
    } catch (error) {
        console.error("Erro ao cadastrar usu치rio:", error);
        res.status(500).send("Erro ao processar cadastro.");
    }
});

// 游댳 Logout do usu치rio
// 游늷 Rota de Logout
router.get("/logout", (req, res) => {
    req.session.destroy((err) => {
        if (err) {
            console.error("Erro ao encerrar a sess칚o:", err);
            return res.status(500).send("Erro ao encerrar sess칚o.");
        }
        res.redirect("/login"); // Redireciona para a tela de login ap칩s logout
    });
});


module.exports = router;
